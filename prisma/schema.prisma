// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// enum   {
//   KIDS
//   GENERAL
//   ADULT
// }

model coursePackage {
  id                  String                @id @default(uuid())
  name                String                @db.Text
  description         String?               @db.Text
  courses             course[]
  questions           question[]
  finalExamResult     finalExamResult[]
  aiPdfData           String?               @db.Text
  aiProvider          String?               @default("gemini")
  courseMaterials     String?               @db.Text
  examDurationMinutes Int?
  isPublished         Boolean               @default(false)
  students            wpos_wpdatatable_23[] @relation("PackageHistory")
  activeStudents      wpos_wpdatatable_23[] @relation("ActivePackage")
  subjectPackages     subjectPackage[] // <-- Add this line for the relation
  terbiaAttendance    tarbiaAttendance[]
  feedback            feedback[]
  qandAQuestion       qandAQuestion[]
  announcement        announcement[]
  ustazId             Int?
  ustaz               ustaz?                @relation(fields: [ustazId], references: [wdt_ID])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model subjectPackage {
  id          String        @id @default(uuid())
  kidpackage  Boolean?      @default(false)
  packageType String?
  subject     String?
  package     coursePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId   String
  createdAt   DateTime      @default(now())
  // @@unique([subject, packageId])
}

model course {
  id          String        @id @default(uuid())
  title       String        @db.Text
  description String?       @db.Text
  imageUrl    String?       @db.Text
  isPublished Boolean       @default(false)
  order       Int // Determines sequence in package
  packageId   String
  package     coursePackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  timeLimit Int?
  timeUnit  String?

  chapters  chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([packageId])
}

model chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  customVideo String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  // isFree      Boolean @default(false)

  questions question[]

  courseId String
  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  studentProgress studentProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model question {
  id              String           @id @default(cuid())
  chapter         chapter?         @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId       String?
  coursePackage   coursePackage?   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId       String?
  question        String           @db.Text
  questionOptions questionOption[]
  questionAnswer  questionAnswer[]
  studentQuiz     studentQuiz[]

  @@index([chapterId])
}

model questionOption {
  id                 String              @id @default(cuid())
  question           question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId         String
  option             String
  questionAnswer     questionAnswer[]
  studentQuizAnswers studentQuizAnswer[]

  @@index([questionId])
}

model questionAnswer {
  id         String         @id @default(cuid())
  question   question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  answer     questionOption @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId   String

  @@index([answerId])
  @@index([questionId])
}

model studentQuiz {
  id                 String              @id @default(cuid())
  student            wpos_wpdatatable_23 @relation(fields: [studentId], references: [wdt_ID], onDelete: Cascade)
  studentId          Int
  question           question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId         String
  isFinalExam        Boolean             @default(false)
  takenAt            DateTime            @default(now())
  studentQuizAnswers studentQuizAnswer[]

  @@unique([studentId, questionId])
  @@index([questionId])
  @@index([studentId])
}

model studentQuizAnswer {
  id               String         @id @default(cuid())
  studentQuiz      studentQuiz    @relation(fields: [studentQuizId], references: [id], onDelete: Cascade)
  studentQuizId    String
  selectedOption   questionOption @relation(fields: [selectedOptionId], references: [id], onDelete: Cascade)
  selectedOptionId String

  @@unique([studentQuizId, selectedOptionId])
  @@index([selectedOptionId])
  @@index([studentQuizId])
}

model studentProgress {
  id          String              @id @default(cuid())
  student     wpos_wpdatatable_23 @relation(fields: [studentId], references: [wdt_ID], onDelete: Cascade)
  studentId   Int
  chapter     chapter             @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  isStarted   Boolean             @default(true)
  isCompleted Boolean             @default(false)
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, chapterId])
  @@index([chapterId])
  @@index([studentId])
}

model finalExamResult {
  id                 String              @id @default(cuid())
  student            wpos_wpdatatable_23 @relation(fields: [studentId], references: [wdt_ID])
  studentId          Int
  coursePackage      coursePackage       @relation(fields: [packageId], references: [id])
  packageId          String
  updationProhibited Boolean             @default(false)
  startingTime       DateTime            @default(now())
  endingTime         DateTime?
}

model admin {
  id        String   @id @default(cuid())
  name      String
  phoneno   String   @unique
  chat_id   String   @unique
  passcode  String
  createdAt DateTime @default(now())
}

model wpos_wpdatatable_23 {
  wdt_ID           Int                @id @default(autoincrement())
  name             String?
  passcode         String?            @unique
  phoneno          String?            @unique
  country          String?
  status           String?
  isKid            Boolean?           @default(false)
  // History of all packages (many-to-many)
  packages         coursePackage[]    @relation("PackageHistory")
  // Active package (one-to-one or many-to-one)
  ustaz            String?
  ustazdata        ustaz?             @relation(fields: [ustaz], references: [ustazid])
  subject          String?
  package          String?
  terbiaAttendance tarbiaAttendance[]
  youtubeSubject   String?
  activePackage    coursePackage?     @relation("ActivePackage", fields: [youtubeSubject], references: [id])
  progress         studentProgress[]
  studentQuizzes   studentQuiz[]
  finalExamResults finalExamResult[]
  chat_id          String?            @default("")
  u_control        String?            @db.VarChar(255)
  controller       controller?        @relation(fields: [u_control], references: [code])
  feedback         feedback[]
  qandAQuestion    qandAQuestion[]    @relation("QandAQuestions")
}

model ustaz {
  wdt_ID               Int                   @id @default(autoincrement())
  picture              String?               @db.VarChar(2000)
  control              String?               @db.VarChar(255)
  subject              String?               @db.VarChar(255)
  phone                String?               @db.VarChar(255)
  schedule             String?               @db.VarChar(255)
  password             String?               @db.VarChar(255)
  telegramgroup        String?               @db.VarChar(2000)
  ustazname            String?               @db.VarChar(255)
  gender               String?               @db.VarChar(255)
  ustazid              String?               @unique @db.VarChar(255)
  userid               Int?
  username             String?               @db.VarChar(255)
  chat_id              String?               @default("")
  stud_ustaz           wpos_wpdatatable_23[]
  coursePackage_usataz coursePackage[]

  @@map("wpos_wpdatatable_24")
}

model controller {
  wdt_ID              Int                   @id @default(autoincrement())
  bot                 String?               @db.VarChar(255)
  chatid              String?               @db.VarChar(255)
  name                String?               @db.VarChar(255)
  code                String?               @unique @db.VarChar(255)
  topic               String?               @db.VarChar(255)
  team_id             Int?                  @db.UnsignedInt
  Phone               String?               @db.VarChar(50)
  username            String                @db.VarChar(60)
  password            String                @db.VarChar(255)
  is_leader           Boolean?              @default(false)
  wpos_wpdatatable_23 wpos_wpdatatable_23[]

  @@map("wpos_wpdatatable_28")
}

model tarbiaAttendance {
  id             String              @id @default(cuid())
  studId         Int
  student        wpos_wpdatatable_23 @relation(fields: [studId], references: [wdt_ID], onDelete: Cascade)
  packageId      String
  coursesPackage coursePackage       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  status         Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model qandAQuestion {
  id              String              @id @default(cuid())
  student         wpos_wpdatatable_23 @relation("QandAQuestions", fields: [studentId], references: [wdt_ID], onDelete: Cascade)
  studentId       Int
  coursePackage   coursePackage       @relation(fields: [coursepackageId], references: [id], onDelete: Cascade)
  coursepackageId String
  question        String              @db.Text
  timestamp       Int? // Video timestamp in seconds where question was asked
  type            String              @default("course") // "course" for introduction video, "activity" for sub-activity video
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  responses       qandAResponse[]

  @@index([coursepackageId])
  @@index([studentId])
}

model qandAResponse {
  id              String        @id @default(cuid())
  videoQuestion   qandAQuestion @relation(fields: [videoQuestionId], references: [id], onDelete: Cascade)
  videoQuestionId String
  ustaz           responseUstaz @relation("QandAResponses", fields: [ustazId], references: [id])
  ustazId         Int
  response        String        @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([videoQuestionId])
  @@index([ustazId])
}

model announcement {
  id                     String        @id @default(uuid())
  anouncementDescription String        @db.Text
  attachLink             String?       @db.Text
  coursesPackageId       String
  createdAt              DateTime      @default(now())
  coursePackage          coursePackage @relation(fields: [coursesPackageId], references: [id], onDelete: Cascade)
}

model feedback {
  id              String              @id @default(uuid())
  student         wpos_wpdatatable_23 @relation(fields: [studentId], references: [wdt_ID], onDelete: Cascade)
  studentId       Int
  coursePackage   coursePackage       @relation(fields: [coursePackageId], references: [id], onDelete: Cascade)
  coursePackageId String
  feedback        String              @db.Text
  rating          Int
  createdAt       DateTime            @default(now())
}

model responseUstaz {
  id            Int             @id @default(autoincrement())
  phoneno       String          @unique
  passcode      String          @unique
  ustazname     String?         @db.VarChar(255)
  chat_id       String?         @default("")
  permissioned  Boolean?        @default(true)
  qandAResponse qandAResponse[] @relation("QandAResponses")
}
